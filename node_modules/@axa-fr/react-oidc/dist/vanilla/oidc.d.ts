import { AuthorizationServiceConfiguration } from '@openid/appauth';
export interface StringMap {
    [key: string]: string;
}
export interface AuthorityConfiguration {
    authorization_endpoint: string;
    token_endpoint: string;
    revocation_endpoint: string;
    end_session_endpoint?: string;
    userinfo_endpoint?: string;
}
export declare type OidcConfiguration = {
    client_id: string;
    redirect_uri: string;
    silent_redirect_uri?: string;
    silent_signin_timeout?: number;
    scope: string;
    authority: string;
    authority_configuration?: AuthorityConfiguration;
    refresh_time_before_tokens_expiration_in_second?: number;
    service_worker_relative_url?: string;
    service_worker_only?: boolean;
    extras?: StringMap;
    token_request_extras?: StringMap;
};
export declare class Oidc {
    configuration: OidcConfiguration;
    userInfo: null;
    tokens: null;
    events: Array<any>;
    private timeoutId;
    private serviceWorker?;
    private configurationName;
    private session?;
    constructor(configuration: OidcConfiguration, configurationName?: string);
    subscriveEvents(func: any): string;
    removeEventSubscription(id: any): void;
    publishEvent(eventName: any, data: any): void;
    static getOrCreate(configuration: any, name?: string): any;
    static get(name?: string): any;
    static eventNames: {
        service_worker_not_supported_by_browser: string;
        token_aquired: string;
        token_renewed: string;
        token_timer: string;
        loginAsync_begin: string;
        loginAsync_error: string;
        loginCallbackAsync_begin: string;
        loginCallbackAsync_end: string;
        loginCallbackAsync_error: string;
        refreshTokensAsync_begin: string;
        refreshTokensAsync_end: string;
        refreshTokensAsync_error: string;
        refreshTokensAsync_silent_begin: string;
        refreshTokensAsync_silent_end: string;
        refreshTokensAsync_silent_error: string;
        tryKeepExistingSessionAsync_begin: string;
        tryKeepExistingSessionAsync_end: string;
        tryKeepExistingSessionAsync_error: string;
        silentSigninAsync_begin: string;
        silentSigninAsync_end: string;
        silentSigninAsync_error: string;
    };
    silentSigninCallbackFromIFrame(): void;
    silentSigninAsync(): Promise<any>;
    initAsync(authority: string, authorityConfiguration: AuthorityConfiguration): Promise<AuthorizationServiceConfiguration>;
    tryKeepExistingSessionAsync(): Promise<boolean>;
    loginAsync(callbackPath?: string, extras?: StringMap, installServiceWorker?: boolean): Promise<void>;
    loginCallbackAsync(): Promise<unknown>;
    refreshTokensAsync(refreshToken: any, silentEvent?: boolean): Promise<any>;
    loginCallbackWithAutoTokensRenewAsync(): Promise<string>;
    userInfoAsync(): Promise<any>;
    destroyAsync(): Promise<void>;
    logoutAsync(callbackPath?: string | undefined): Promise<void>;
}
export default Oidc;
//# sourceMappingURL=oidc.d.ts.map