"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.useOidcIdToken = exports.useOidcAccessToken = exports.useOidc = void 0;
var react_1 = require("react");
var oidc_1 = __importDefault(require("./vanilla/oidc"));
var defaultConfigurationName = "default";
var useOidc = function (configurationName) {
    if (configurationName === void 0) { configurationName = defaultConfigurationName; }
    var getOidc = oidc_1.default.get;
    var login = function (callbackPath, extras) {
        if (callbackPath === void 0) { callbackPath = undefined; }
        if (extras === void 0) { extras = null; }
        return getOidc(configurationName).loginAsync(callbackPath, extras);
    };
    var logout = function (callbackPath) {
        if (callbackPath === void 0) { callbackPath = undefined; }
        return getOidc(configurationName).logoutAsync(callbackPath);
    };
    var isAuthenticated = false;
    var oidc = getOidc(configurationName);
    if (oidc) {
        isAuthenticated = getOidc(configurationName).tokens != null;
    }
    return { login: login, logout: logout, isAuthenticated: isAuthenticated };
};
exports.useOidc = useOidc;
var accessTokenInitialState = { accessToken: null, accessTokenPayload: null };
var initTokens = function (configurationName) {
    var getOidc = oidc_1.default.get;
    var oidc = getOidc(configurationName);
    if (oidc.tokens) {
        var tokens = oidc.tokens;
        return { accessToken: tokens.accessToken, accessTokenPayload: tokens.accessTokenPayload };
    }
    return accessTokenInitialState;
};
var useOidcAccessToken = function (configurationName) {
    if (configurationName === void 0) { configurationName = defaultConfigurationName; }
    var getOidc = oidc_1.default.get;
    var _a = (0, react_1.useState)(initTokens(configurationName)), state = _a[0], setAccessToken = _a[1];
    (0, react_1.useEffect)(function () {
        var isMounted = true;
        var oidc = getOidc(configurationName);
        if (oidc.tokens) {
            var tokens = oidc.tokens;
            setAccessToken({ accessToken: tokens.accessToken, accessTokenPayload: tokens.accessTokenPayload });
        }
        var newSubscriptionId = oidc.subscriveEvents(function (name, data) {
            if (name == oidc_1.default.eventNames.token_renewed
                || name == oidc_1.default.eventNames.token_aquired) {
                if (isMounted) {
                    var tokens = oidc.tokens;
                    setAccessToken(tokens != null ? { accessToken: tokens.accessToken, accessTokenPayload: tokens.accessTokenPayload } : accessTokenInitialState);
                }
            }
        });
        return function () {
            isMounted = false;
            oidc.removeEventSubscription(newSubscriptionId);
        };
    }, [configurationName]);
    return state;
};
exports.useOidcAccessToken = useOidcAccessToken;
var idTokenInitialState = { idToken: null, idTokenPayload: null };
var initIdToken = function (configurationName) {
    var getOidc = oidc_1.default.get;
    var oidc = getOidc(configurationName);
    if (oidc.tokens) {
        var tokens = oidc.tokens;
        return { idToken: tokens.idToken, idTokenPayload: tokens.idTokenPayload };
    }
    return idTokenInitialState;
};
var useOidcIdToken = function (configurationName) {
    if (configurationName === void 0) { configurationName = defaultConfigurationName; }
    var getOidc = oidc_1.default.get;
    var _a = (0, react_1.useState)(initIdToken(configurationName)), state = _a[0], setIDToken = _a[1];
    (0, react_1.useEffect)(function () {
        var isMounted = true;
        var oidc = getOidc(configurationName);
        if (oidc.tokens) {
            var tokens = oidc.tokens;
            setIDToken({ idToken: tokens.idToken, idTokenPayload: tokens.idTokenPayload });
        }
        var newSubscriptionId = oidc.subscriveEvents(function (name, data) {
            if (name == oidc_1.default.eventNames.token_renewed
                || name == oidc_1.default.eventNames.token_aquired) {
                if (isMounted) {
                    var tokens = oidc.tokens;
                    setIDToken(tokens != null ? { idToken: tokens.idToken, idTokenPayload: tokens.idTokenPayload } : idTokenInitialState);
                }
            }
        });
        return function () {
            isMounted = false;
            oidc.removeEventSubscription(newSubscriptionId);
        };
    }, [configurationName]);
    return state;
};
exports.useOidcIdToken = useOidcIdToken;
//# sourceMappingURL=ReactOidc.js.map