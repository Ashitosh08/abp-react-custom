"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OidcProvider = void 0;
var react_1 = __importStar(require("react"));
var oidc_1 = __importDefault(require("./vanilla/oidc"));
var OidcRoutes_1 = __importDefault(require("./core/routes/OidcRoutes"));
var index_1 = require("./core/default-component/index");
var ServiceWorkerNotSupported_component_1 = __importDefault(require("./core/default-component/ServiceWorkerNotSupported.component"));
var AuthenticateError_component_1 = __importDefault(require("./core/default-component/AuthenticateError.component"));
var defaultEventState = { name: "", data: null };
var OidcSession = function (_a) {
    var loadingComponent = _a.loadingComponent, children = _a.children, configurationName = _a.configurationName;
    var _b = (0, react_1.useState)(true), loading = _b[0], setLoading = _b[1];
    var getOidc = oidc_1.default.get;
    var oidc = getOidc(configurationName);
    (0, react_1.useEffect)(function () {
        var isMounted = true;
        if (oidc) {
            oidc.tryKeepExistingSessionAsync().then(function () {
                if (isMounted) {
                    setLoading(false);
                }
            });
        }
        return function () {
            isMounted = false;
        };
    }, [oidc, configurationName]);
    var LoadingComponent = loadingComponent;
    return (react_1.default.createElement(react_1.default.Fragment, null, loading ? (react_1.default.createElement(LoadingComponent, { configurationName: configurationName })) : (react_1.default.createElement(react_1.default.Fragment, null, children))));
};
var Switch = function (_a) {
    var isLoading = _a.isLoading, loadingComponent = _a.loadingComponent, children = _a.children, configurationName = _a.configurationName;
    var LoadingComponent = loadingComponent;
    if (isLoading) {
        return react_1.default.createElement(LoadingComponent, { configurationName: configurationName }, children);
    }
    return react_1.default.createElement(react_1.default.Fragment, null, children);
};
var OidcProvider = function (_a) {
    var children = _a.children, configuration = _a.configuration, _b = _a.configurationName, configurationName = _b === void 0 ? "default" : _b, _c = _a.callbackSuccessComponent, callbackSuccessComponent = _c === void 0 ? index_1.CallBackSuccess : _c, _d = _a.callbackErrorComponent, callbackErrorComponent = _d === void 0 ? index_1.AuthenticateError : _d, _e = _a.authenticatingComponent, authenticatingComponent = _e === void 0 ? index_1.Authenticating : _e, _f = _a.loadingComponent, loadingComponent = _f === void 0 ? index_1.Loading : _f, _g = _a.serviceWorkerNotSupportedComponent, serviceWorkerNotSupportedComponent = _g === void 0 ? ServiceWorkerNotSupported_component_1.default : _g, _h = _a.authenticatingErrorComponent, authenticatingErrorComponent = _h === void 0 ? AuthenticateError_component_1.default : _h, _j = _a.sessionLostComponent, sessionLostComponent = _j === void 0 ? index_1.SessionLost : _j, _k = _a.onSessionLost, onSessionLost = _k === void 0 ? null : _k;
    var getOidc = function (configurationName) {
        if (configurationName === void 0) { configurationName = "default"; }
        return oidc_1.default.getOrCreate(configuration, configurationName);
    };
    var _l = (0, react_1.useState)(true), loading = _l[0], setLoading = _l[1];
    var _m = (0, react_1.useState)(defaultEventState), event = _m[0], setEvent = _m[1];
    var _o = (0, react_1.useState)("default"), currentConfigurationName = _o[0], setConfigurationName = _o[1];
    (0, react_1.useEffect)(function () {
        var oidc = getOidc(configurationName);
        var newSubscriptionId = oidc.subscriveEvents(function (name, data) {
            if (name == oidc_1.default.eventNames.refreshTokensAsync_error) {
                if (onSessionLost != null) {
                    onSessionLost();
                    return;
                }
                setEvent({ name: name, data: data });
            }
            else if (name == oidc_1.default.eventNames.loginAsync_begin
                || name == oidc_1.default.eventNames.loginCallbackAsync_end
                || name == oidc_1.default.eventNames.loginAsync_error
                || name == oidc_1.default.eventNames.loginCallbackAsync_error) {
                setEvent({ name: name, data: data });
            }
            else if (name == oidc_1.default.eventNames.service_worker_not_supported_by_browser && configuration.service_worker_only === true) {
                setEvent({ name: name, data: data });
            }
        });
        setConfigurationName(configurationName);
        setLoading(false);
        return function () {
            var previousOidc = getOidc(configurationName);
            previousOidc.removeEventSubscription(newSubscriptionId);
            setEvent(defaultEventState);
        };
    }, [configuration, configurationName]);
    var SessionLostComponent = sessionLostComponent;
    var AuthenticatingComponent = authenticatingComponent;
    var LoadingComponent = loadingComponent;
    var ServiceWorkerNotSupportedComponent = serviceWorkerNotSupportedComponent;
    var AuthenticatingErrorComponent = authenticatingErrorComponent;
    var isLoading = (loading || (currentConfigurationName != configurationName));
    var eventName = event.name;
    switch (eventName) {
        case oidc_1.default.eventNames.service_worker_not_supported_by_browser:
            return react_1.default.createElement(Switch, { loadingComponent: LoadingComponent, isLoading: isLoading, configurationName: configurationName },
                react_1.default.createElement(ServiceWorkerNotSupportedComponent, { configurationName: configurationName }));
        case oidc_1.default.eventNames.loginAsync_begin:
            return react_1.default.createElement(Switch, { loadingComponent: LoadingComponent, isLoading: isLoading, configurationName: configurationName },
                react_1.default.createElement(AuthenticatingComponent, { configurationName: configurationName }));
        case oidc_1.default.eventNames.loginAsync_error:
        case oidc_1.default.eventNames.loginCallbackAsync_error:
            return react_1.default.createElement(Switch, { loadingComponent: LoadingComponent, isLoading: isLoading, configurationName: configurationName },
                react_1.default.createElement(AuthenticatingErrorComponent, { configurationName: configurationName }),
                ";");
        case oidc_1.default.eventNames.refreshTokensAsync_error:
            return react_1.default.createElement(Switch, { loadingComponent: LoadingComponent, isLoading: isLoading, configurationName: configurationName },
                react_1.default.createElement(SessionLostComponent, { configurationName: configurationName }));
        default:
            return (react_1.default.createElement(Switch, { loadingComponent: LoadingComponent, isLoading: isLoading, configurationName: configurationName },
                react_1.default.createElement(OidcRoutes_1.default, { redirect_uri: configuration.redirect_uri, silent_redirect_uri: configuration.silent_redirect_uri, callbackSuccessComponent: callbackSuccessComponent, callbackErrorComponent: callbackErrorComponent, authenticatingComponent: authenticatingComponent, configurationName: configurationName },
                    react_1.default.createElement(OidcSession, { loadingComponent: LoadingComponent, configurationName: configurationName }, children))));
    }
};
exports.OidcProvider = OidcProvider;
exports.default = exports.OidcProvider;
//# sourceMappingURL=OidcProvider.js.map